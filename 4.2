import tkinter as tk
from tkinter import filedialog, messagebox, ttk
from tkcalendar import Calendar
import pandas as pd
from datetime import datetime
import os
import shutil
from openpyxl import load_workbook
from openpyxl.styles import Alignment, Font
import logging

# --- Logger Setup ---
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# --- Constants ---
PRIMARY_FOLDER = r"C:\folder\primary"
SECONDARY_FOLDER = r"C:\folder\secondary"
MAIN_FILE_PATH = r"C:\folder\main_file.xlsx"
TEMPLATE_FILE_PATH = r"C:\folder\template.xlsx"
OUTPUT_FOLDER = r"C:\folder\output"

DATE_FORMAT = "%Y-%m-%d"
HEADER_MAPPING = {
    "TRADE ID": "TRADEIDENTIFIER",
    "Adjusted P&L": "Adjusted_P&L",
    "Bid": "Bid",
    "Offer": "Offer",
    "TRADE DATE": "TRADE DATE",
    "SPREAD": "SPREAD"
}
DEFAULT_VALUES = {
    "Sub Product": "CRA SWAP",
    "PAYER": "CHANGE",
    "Pay": "Float",
    "Pay Frequency": "1MO",
    "Pay CCY": "USD",
    "Receive": "Float",
    "Receive Index": "USD SOFR",
    "Receive Rate": "0.3",
    "Receive Frequency": "1MO",
    "Receive CCY": "USD"
}

class StatementGeneratorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Statement Generator")
        
        # Load Data
        self.main_data = self.load_main_file()
        if self.main_data is None:
            return

        # UI Setup
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill="both", expand=True)
        self.create_tabs()

    # --- File Operations ---
    def load_main_file(self):
        try:
            return pd.read_excel(MAIN_FILE_PATH)
        except FileNotFoundError as e:
            messagebox.showerror("Error", f"Main file not found: {e}")
            logger.error(f"Main file not found: {e}")
            self.root.destroy()
            return None

    def save_main_file(self):
        try:
            self.main_data.to_excel(MAIN_FILE_PATH, index=False)
            messagebox.showinfo("Success", "Main file saved successfully.")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to save main file: {e}")
            logger.error(f"Failed to save main file: {e}")

    def refresh_main_file(self):
        try:
            self.main_data = self.load_main_file()
            self.populate_treeview()
            messagebox.showinfo("Success", "Main file refreshed successfully.")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to refresh main file: {e}")
            logger.error(f"Failed to refresh main file: {e}")

    def select_moved_file(self):
        selected_date = self.date_picker.get_date()
        formatted_date = datetime.strptime(selected_date, DATE_FORMAT).strftime(DATE_FORMAT)
        expected_file_name = f"moved_file_{formatted_date}.csv"

        primary_path = os.path.join(PRIMARY_FOLDER, expected_file_name)
        secondary_path = os.path.join(SECONDARY_FOLDER, expected_file_name)

        if os.path.exists(primary_path):
            self.moved_file_path = primary_path
            self.moved_file_label.config(text=f"File found: {primary_path}")
        elif os.path.exists(secondary_path):
            shutil.copy(secondary_path, primary_path)
            self.moved_file_path = primary_path
            self.moved_file_label.config(text=f"File copied: {primary_path}")
        else:
            self.moved_file_path = None
            self.moved_file_label.config(text="File not found.")

    # --- Row Operations ---
    def validate_inputs(self, entries):
        for key, entry in entries.items():
            if not entry.get().strip():
                return f"{key} cannot be empty."
        return None

    def create_popup(self, title, row_values=None):
        popup = tk.Toplevel(self.root)
        popup.title(title)
        popup.geometry("500x500")

        entries = {}
        for i, col in enumerate(self.main_data.columns):
            tk.Label(popup, text=col).grid(row=i, column=0, padx=10, pady=5)
            entry = tk.Entry(popup)
            if row_values:
                entry.insert(0, row_values[i])
            entry.grid(row=i, column=1, padx=10, pady=5)
            entries[col] = entry

        return popup, entries

    def add_new_row(self):
        if self.main_data is None:
            messagebox.showerror("Error", "Main file not loaded.")
            return

        popup, entries = self.create_popup("Add New Row")

        def save_row():
            error = self.validate_inputs(entries)
            if error:
                messagebox.showerror("Validation Error", error)
                return

            new_row = {col: entry.get() for col, entry in entries.items()}
            self.main_data = pd.concat([self.main_data, pd.DataFrame([new_row])], ignore_index=True)
            self.save_main_file()
            self.refresh_main_file()
            popup.destroy()

        tk.Button(popup, text="Save Row", command=save_row).grid(row=len(self.main_data.columns), column=0, columnspan=2, pady=10)

    def edit_selected_row(self):
        selected_item = self.tree.focus()
        if not selected_item:
            messagebox.showerror("Error", "No row selected.")
            return

        row_index = int(self.tree.index(selected_item))
        row_values = self.tree.item(selected_item, "values")

        popup, entries = self.create_popup("Edit Selected Row", row_values=row_values)

        def save_changes():
            error = self.validate_inputs(entries)
            if error:
                messagebox.showerror("Validation Error", error)
                return

            new_values = [entry.get() for entry in entries.values()]
            self.main_data.iloc[row_index] = new_values
            self.save_main_file()
            self.populate_treeview()
            popup.destroy()

        tk.Button(popup, text="Save Changes", command=save_changes).grid(row=len(self.main_data.columns), column=0, columnspan=2, pady=10)

    # --- UI Components ---
    def create_tabs(self):
        self.create_process_files_tab()
        self.create_edit_main_file_tab()

    def create_process_files_tab(self):
        frame = ttk.Frame(self.notebook)
        self.notebook.add(frame, text="Process Files")

        tk.Label(frame, text="Moved File (CSV):").grid(row=0, column=0, padx=10, pady=5)
        self.moved_file_label = tk.Label(frame, text="No file selected")
        self.moved_file_label.grid(row=0, column=1, padx=10, pady=5)

        tk.Label(frame, text="Date:").grid(row=1, column=0, padx=10, pady=5)
        self.date_picker = Calendar(frame, selectmode="day", date_pattern="yyyy-mm-dd")
        self.date_picker.grid(row=1, column=1, columnspan=2, padx=10, pady=5)

        ttk.Button(frame, text="Find File", command=self.select_moved_file).grid(row=2, column=0, padx=10, pady=10)
        ttk.Button(frame, text="Process Files", command=self.process_files).grid(row=2, column=1, padx=10, pady=10)

    def create_edit_main_file_tab(self):
        frame = ttk.Frame(self.notebook)
        self.notebook.add(frame, text="Edit Main File")

        button_frame = ttk.Frame(frame)
        button_frame.grid(row=0, column=0, pady=5, sticky="ew")
        ttk.Button(button_frame, text="Save Changes", command=self.save_main_file).pack(side="left", padx=5)
        ttk.Button(button_frame, text="Refresh", command=self.refresh_main_file).pack(side="left", padx=5)
        ttk.Button(button_frame, text="Add Row", command=self.add_new_row).pack(side="left", padx=5)
        ttk.Button(button_frame, text="Edit Row", command=self.edit_selected_row).pack(side="left", padx=5)

        self.create_treeview(frame)
        self.populate_treeview()

    def create_treeview(self, frame):
        self.tree = ttk.Treeview(frame, show="headings", height=15)
        self.tree["columns"] = list(self.main_data.columns)

        for col in self.main_data.columns:
            self.tree.heading(col, text=col, anchor="w")
            self.tree.column(col, width=120, anchor="w")

        scroll_y = ttk.Scrollbar(frame, orient="vertical", command=self.tree.yview)
        scroll_y.grid(row=1, column=1, sticky="ns")
        self.tree.configure(yscrollcommand=scroll_y.set)

        scroll_x = ttk.Scrollbar(frame, orient="horizontal", command=self.tree.xview)
        scroll_x.grid(row=2, column=0, sticky="ew")
        self.tree.configure(xscrollcommand=scroll_x.set)

        self.tree.grid(row=1, column=0, sticky="nsew")
        frame.grid_rowconfigure(1, weight=1)
        frame.grid_columnconfigure(0, weight=1)

    def populate_treeview(self):
        self.tree.delete(*self.tree.get_children())
        for _, row in self.main_data.iterrows():
            self.tree.insert("", "end", values=list(row))

# --- Main Execution ---
if __name__ == "__main__":
    root = tk.Tk()
    app = StatementGeneratorApp(root)
    root.mainloop()
