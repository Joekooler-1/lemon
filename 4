import tkinter as tk
from tkinter import filedialog, messagebox, ttk
from tkcalendar import Calendar
import pandas as pd
from datetime import datetime
import os
import shutil
from openpyxl import load_workbook


# --- Editable Constants ---
PRIMARY_FOLDER = r"C:\folder\primary"  # <-- Edit this to your primary folder path
SECONDARY_FOLDER = r"C:\folder\secondary"  # <-- Edit this to your secondary folder path
MAIN_FILE_PATH = r"C:\folder\main_file.xlsx"  # <-- Edit this to your main file path
TEMPLATE_FILE_PATH = r"C:\folder\template.xlsx"  # <-- Edit this to your template file path
OUTPUT_FOLDER = r"C:\folder\output"  # <-- Edit this to your output folder path

# Default values for new rows
DEFAULT_VALUES = {
    "Sub Product": "CRA SWAP",
    "PAYER": "CHANGE",
    "Pay": "Float",
    "Pay Frequency": "1MO",
    "Pay CCY": "USD",
    "Receive": "Float",
    "Receive Index": "USD SOFR",
    "Receive Rate": "0.3",
    "Receive Frequency": "1MO",
    "Receive CCY": "USD"
}

DATE_COLUMNS = {"TRADE DATE", "Effective Date", "Maturity Date"}
DATE_FORMAT = "%Y-%m-%d"


class StatementGeneratorApp:
    """
    A GUI application for managing and processing trade data using Tkinter.
    """

    def __init__(self, root):
        """
        Initialize the application, load data, and create the UI.

        Args:
            root (tk.Tk): The root Tkinter window.
        """
        self.root = root
        self.root.title("Statement Generator")

        # Paths
        self.main_file_path = MAIN_FILE_PATH
        self.moved_file_path = None

        # Load data
        self.main_data = self.load_main_file()

        # Create UI components
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill="both", expand=True)
        self.create_tabs()

    # --- File Operations ---
    def load_main_file(self):
        """
        Load the main file into a DataFrame.

        Returns:
            pd.DataFrame: The loaded main file data.
        """
        try:
            return pd.read_excel(self.main_file_path)
        except FileNotFoundError:
            messagebox.showerror("Error", f"Main file not found at {self.main_file_path}")
            self.root.destroy()
            return None

    def save_main_file(self):
        """
        Save the current state of the main file to its path.
        """
        try:
            self.main_data.to_excel(self.main_file_path, index=False)
            messagebox.showinfo("Success", "Main file saved successfully.")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to save the main file: {e}")

    def refresh_main_file(self):
        """
        Reload the main file and refresh the Treeview with updated data.
        """
        try:
            self.main_data = self.load_main_file()
            self.populate_treeview()
            messagebox.showinfo("Success", "Main file refreshed successfully.")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to refresh the main file: {e}")

    def add_new_row(self):
        """
        Add a new row to the Treeview and refresh the file.
        """
        popup = tk.Toplevel(self.root)
        popup.title("Add New Row")
        popup.geometry("500x500")

        entries = {}
        for i, col in enumerate(self.main_data.columns):
            tk.Label(popup, text=col).grid(row=i, column=0, padx=10, pady=5)

            # Default value or empty if not in DEFAULT_VALUES
            default_value = DEFAULT_VALUES.get(col, "")
            entry = tk.Entry(popup)
            entry.insert(0, default_value)
            entry.grid(row=i, column=1, padx=10, pady=5)
            entries[col] = entry

        def save_row():
            """
            Validate and save the new row to the Treeview and main file.
            """
            new_row = {col: entries[col].get() for col in self.main_data.columns}
            self.main_data = pd.concat([self.main_data, pd.DataFrame([new_row])], ignore_index=True)
            self.save_main_file()
            self.refresh_main_file()
            popup.destroy()

        tk.Button(popup, text="Add Row", command=save_row).grid(row=len(self.main_data.columns), column=0, columnspan=2, pady=10)

    def edit_selected_row(self):
        """
        Edit the selected row from the Treeview.
        """
        selected_item = self.tree.focus()
        if not selected_item:
            messagebox.showerror("Error", "No row selected.")
            return

        row_values = self.tree.item(selected_item, "values")
        popup = tk.Toplevel(self.root)
        popup.title("Edit Selected Row")
        popup.geometry("500x500")

        entries = {}
        for i, col in enumerate(self.main_data.columns):
            tk.Label(popup, text=col).grid(row=i, column=0, padx=10, pady=5)

            entry = tk.Entry(popup)
            entry.insert(0, row_values[i])
            entry.grid(row=i, column=1, padx=10, pady=5)
            entries[col] = entry

        def save_changes():
            """
            Save changes to the selected row.
            """
            new_values = [entries[col].get() for col in self.main_data.columns]
            self.main_data.loc[self.tree.index(selected_item)] = new_values
            self.save_main_file()
            self.refresh_main_file()
            popup.destroy()

        tk.Button(popup, text="Save Changes", command=save_changes).grid(row=len(self.main_data.columns), column=0, columnspan=2, pady=10)

    # --- UI Setup ---
    def create_tabs(self):
        """
        Create tabs for editing the main file and processing moved files.
        """
        self.create_process_files_tab()
        self.create_edit_main_file_tab()

    def create_process_files_tab(self):
        """
        Create the tab for processing moved files.
        """
        frame = ttk.Frame(self.notebook)
        self.notebook.add(frame, text="Process Files")

        tk.Label(frame, text="Moved File (CSV):").grid(row=0, column=0, padx=10, pady=5)
        self.moved_file_label = tk.Label(frame, text="No file selected")
        self.moved_file_label.grid(row=0, column=1, padx=10, pady=5)

        tk.Label(frame, text="Date:").grid(row=1, column=0, padx=10, pady=5)
        self.date_picker = Calendar(frame, selectmode="day", date_pattern="yyyy-mm-dd")
        self.date_picker.grid(row=1, column=1, columnspan=2, padx=10, pady=5)

        ttk.Button(frame, text="Find File", command=self.select_moved_file).grid(row=2, column=0, padx=10, pady=10)
        ttk.Button(frame, text="Process Files", command=self.process_files).grid(row=2, column=1, padx=10, pady=10)

    def create_edit_main_file_tab(self):
        """
        Create the tab for editing the main file.
        """
        frame = ttk.Frame(self.notebook)
        self.notebook.add(frame, text="Edit Main File")

        button_frame = ttk.Frame(frame)
        button_frame.grid(row=0, column=0, pady=5, sticky="ew")
        ttk.Button(button_frame, text="Save Changes", command=self.save_main_file, width=15).pack(side="left", padx=5)
        ttk.Button(button_frame, text="Refresh", command=self.refresh_main_file, width=15).pack(side="left", padx=5)
        ttk.Button(button_frame, text="Add Row", command=self.add_new_row, width=15).pack(side="left", padx=5)
        ttk.Button(button_frame, text="Edit Row", command=self.edit_selected_row, width=15).pack(side="left", padx=5)

        self.create_treeview(frame)
        self.populate_treeview()

    def populate_treeview(self):
        """
        Populate the Treeview with data from the main file.
        Clears existing data in the Treeview and inserts rows from self.main_data.
        """
        self.tree.delete(*self.tree.get_children())
        for _, row in self.main_data.iterrows():
            self.tree.insert("", "end", values=list(row))

    def create_treeview(self, frame):
        """
        Create and configure a Treeview widget for displaying data.

        Args:
            frame (ttk.Frame): The parent frame for the Treeview.
        """
        self.tree = ttk.Treeview(frame, show="headings", height=15)
        self.tree["columns"] = list(self.main_data.columns)

        for col in self.main_data.columns:
            self.tree.heading(col, text=col, anchor="w")
            self.tree.column(col, width=120, anchor="w")

        scroll_y = ttk.Scrollbar(frame, orient="vertical", command=self.tree.yview)
        scroll_y.grid(row=1, column=1, sticky="ns")
        self.tree.configure(yscrollcommand=scroll_y.set)

        scroll_x = ttk.Scrollbar(frame, orient="horizontal", command=self.tree.xview)
        scroll_x.grid(row=2, column=0, sticky="ew")
        self.tree.configure(xscrollcommand=scroll_x.set)

        self.tree.grid(row=1, column=0, sticky="nsew")
        frame.grid_rowconfigure(1, weight=1)
        frame.grid_columnconfigure(0, weight=1)


# --- Main Execution ---
if __name__ == "__main__":
    root = tk.Tk()
    app = StatementGeneratorApp(root)
    root.mainloop()
