import tkinter as tk
from tkinter import filedialog, messagebox, ttk
from tkcalendar import Calendar
import pandas as pd
from datetime import datetime
import os
import shutil
from openpyxl import load_workbook

# --- Editable Constants ---
PRIMARY_FOLDER = r"C:\folder\primary"  # Edit to your primary folder path
SECONDARY_FOLDER = r"C:\folder\secondary"  # Edit to your secondary folder path
MAIN_FILE_PATH = r"C:\folder\main_file.xlsx"  # Edit to your main file path
TEMPLATE_FILE_PATH = r"C:\folder\template.xlsx"  # Edit to your template file path
OUTPUT_FOLDER = r"C:\folder\output"  # Edit to your output folder path

# Header mappings between template headers and processed data
HEADER_MAPPING = {
    "TRADE ID": "TRADEIDENTIFIER",
    "Adjusted P&L": "Adjusted_P&L",
    "Bid": "Bid",
    "Offer": "Offer",
    "TRADE DATE": "TRADE DATE",
    "SPREAD": "SPREAD"
}

# Default values for new rows
DEFAULT_VALUES = {
    "Sub Product": "CRA SWAP",
    "PAYER": "CHANGE",
    "Pay": "Float",
    "Pay Frequency": "1MO",
    "Pay CCY": "USD",
    "Receive": "Float",
    "Receive Index": "USD SOFR",
    "Receive Rate": "0.3",
    "Receive Frequency": "1MO",
    "Receive CCY": "USD"
}

DATE_COLUMNS = {"TRADE DATE", "Effective Date", "Maturity Date"}
DATE_FORMAT = "%Y-%m-%d"


def calculate_amortization(start_date, current_date, value):
    """
    Calculate the amortized value for the given time period.

    Args:
        start_date (datetime): Start date of the amortization.
        current_date (datetime): Current date for calculation.
        value (float): Value to amortize.

    Returns:
        float: Amortized value adjusted for the elapsed time.
    """
    fraction_year_passed = (current_date - start_date).days / 365
    months_passed = fraction_year_passed * 12
    return max(0, value * (12 - months_passed) / 12)


class StatementGeneratorApp:
    """
    GUI-based statement generator for managing, processing, and generating client-specific data files.
    """

    def __init__(self, root):
        """
        Initialize the application, load data, and create UI components.

        Args:
            root (tk.Tk): Root Tkinter window.
        """
        self.root = root
        self.root.title("Statement Generator")

        # Paths
        self.main_file_path = MAIN_FILE_PATH
        self.moved_file_path = None

        # Load main data
        self.main_data = self.load_main_file()

        # Create UI components
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill="both", expand=True)
        self.create_tabs()

    # --- File Operations ---
    def load_main_file(self):
        """
        Load the main file into a DataFrame.
        """
        try:
            return pd.read_excel(self.main_file_path)
        except FileNotFoundError:
            messagebox.showerror("Error", f"Main file not found at {self.main_file_path}")
            self.root.destroy()
            return None

    def save_main_file(self):
        """
        Save changes to the main file.
        """
        try:
            self.main_data.to_excel(self.main_file_path, index=False)
            messagebox.showinfo("Success", "Main file saved successfully.")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to save the main file: {e}")

    def refresh_main_file(self):
        """
        Reload the main file and update the Treeview with the latest data.
        """
        try:
            self.main_data = self.load_main_file()
            self.populate_treeview()
            messagebox.showinfo("Success", "Main file refreshed successfully.")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to refresh the main file: {e}")

    def add_new_row(self):
        """
        Add a new row to the Treeview and main file.
        """
        if self.main_data is None:
            messagebox.showerror("Error", "Main file not loaded. Cannot add rows.")
            return

        # Popup window for adding a new row
        popup = tk.Toplevel(self.root)
        popup.title("Add New Row")
        popup.geometry("500x500")

        # Create input fields for each column
        entries = {}
        for i, col in enumerate(self.main_data.columns):
            tk.Label(popup, text=col).grid(row=i, column=0, padx=10, pady=5)

            # Set default values or leave blank
            default_value = DEFAULT_VALUES.get(col, "")
            entry = tk.Entry(popup)
            entry.insert(0, default_value)
            entry.grid(row=i, column=1, padx=10, pady=5)
            entries[col] = entry

        # Save the new row and refresh UI
        def save_row():
            try:
                new_row = {col: entries[col].get() for col in self.main_data.columns}
                self.main_data = pd.concat([self.main_data, pd.DataFrame([new_row])], ignore_index=True)
                self.save_main_file()
                self.refresh_main_file()
                popup.destroy()
            except Exception as e:
                messagebox.showerror("Error", f"Failed to add row: {e}")

        # Add Save button to popup
        tk.Button(popup, text="Save Row", command=save_row).grid(row=len(self.main_data.columns), column=0, columnspan=2, pady=10)

    def edit_selected_row(self):
        """
        Edit the selected row from the Treeview.
        """
        selected_item = self.tree.focus()
        if not selected_item:
            messagebox.showerror("Error", "No row selected.")
            return

        row_values = self.tree.item(selected_item, "values")
        popup = tk.Toplevel(self.root)
        popup.title("Edit Selected Row")
        popup.geometry("500x500")

        entries = {}
        for i, col in enumerate(self.main_data.columns):
            tk.Label(popup, text=col).grid(row=i, column=0, padx=10, pady=5)

            entry = tk.Entry(popup)
            entry.insert(0, row_values[i])
            entry.grid(row=i, column=1, padx=10, pady=5)
            entries[col] = entry

        def save_changes():
            """
            Save changes to the selected row and refresh the UI.
            """
            new_values = [entries[col].get() for col in self.main_data.columns]
            self.main_data.iloc[int(self.tree.index(selected_item))] = new_values
            self.save_main_file()
            self.refresh_main_file()
            popup.destroy()

        tk.Button(popup, text="Save Changes", command=save_changes).grid(row=len(self.main_data.columns), column=0, columnspan=2, pady=10)

    def process_files(self):
        """
        Process the main and moved files, generate calculations, and prepare the output.
        """
        if not self.moved_file_path:
            messagebox.showerror("Error", "Please select a moved file.")
            return

        if not os.path.exists(TEMPLATE_FILE_PATH):
            messagebox.showerror("Error", f"Template file not found: {TEMPLATE_FILE_PATH}")
            return

        try:
            # Load moved data and trim TRADEIDENTIFIER
            moved_data = pd.read_csv(self.moved_file_path)
            moved_data['TRADEIDENTIFIER'] = moved_data['TRADEIDENTIFIER'].str[:7]

            # Merge data with main file
            self.main_data['TRADEIDENTIFIER'] = self.main_data['TRADEIDENTIFIER'].astype(str)
            processed_data = self.main_data.merge(moved_data[['TRADEIDENTIFIER', 'PV']], on='TRADEIDENTIFIER', how='left')
            processed_data['PV'] = processed_data['PV'].fillna(0) * -1  # Flip PV sign

            # Get selected date for amortization
            selected_date = datetime.strptime(self.date_picker.get_date(), DATE_FORMAT)

            # Apply calculations
            def calculate_row(row):
                if pd.notna(row.get('P&L')) and pd.notna(row.get('TRADE DATE')):
                    start_date = pd.to_datetime(row['TRADE DATE'])
                    adjusted_pnl = calculate_amortization(start_date, selected_date, float(row['P&L']))
                    combined_value = row['PV'] + adjusted_pnl
                    bid = combined_value - (2 / 3) * float(row.get('SPREAD', 0))
                    offer = combined_value + (1 / 3) * float(row.get('SPREAD', 0))
                    return pd.Series([adjusted_pnl, combined_value, bid, offer])
                return pd.Series([None, None, None, None])

            processed_data[['Adjusted_P&L', 'Combined_Value', 'Bid', 'Offer']] = processed_data.apply(calculate_row, axis=1)

            # Generate output for each FUND ID
            fund_column = "FUND ID"
            if fund_column not in processed_data.columns:
                messagebox.showerror("Error", f"Column '{fund_column}' not found in processed data.")
                return

            unique_funds = processed_data[fund_column].dropna().unique()
            for fund_id in unique_funds:
                client_data = processed_data[processed_data[fund_column] == fund_id]
                self.fill_template(fund_id, client_data)

            messagebox.showinfo("Success", "Statements generated successfully.")
        except Exception as e:
            messagebox.showerror("Error", f"An error occurred while processing: {e}")

    def fill_template(self, fund_id, data):
        """
        Fill the Excel template with processed data for a specific client.

        Args:
            fund_id (str): Unique client identifier (FUND ID).
            data (pd.DataFrame): Processed data for the client.
        """
        workbook = load_workbook(TEMPLATE_FILE_PATH)
        sheet = workbook.active

        # Remove external links if present
        if hasattr(workbook, "remove_external_links"):
            workbook.remove_external_links()

        # Populate FUND ID and date
        sheet["C12"] = f"DAILY_BMO - {fund_id} Lon_IRS"
        sheet["C14"] = self.date_picker.get_date()

        # Insert rows dynamically
        headers = [sheet.cell(row=18, column=col).value for col in range(2, sheet.max_column + 1)]
        start_row = 18
        for idx, row in data.iterrows():
            sheet.insert_rows(start_row + idx + 1)
            for col_idx, header in enumerate(headers):
                mapped_header = HEADER_MAPPING.get(header, header)
                value = row.get(mapped_header, "")
                sheet.cell(row=start_row + idx + 1, column=col_idx + 2).value = value

        # Save the output file
        excel_output_path = os.path.join(OUTPUT_FOLDER, f"{fund_id}_statement.xlsx")
        workbook.save(excel_output_path)

    # --- UI Tabs ---
    def create_tabs(self):
        """
        Create tabs for managing data and processing files.
        """
        self.create_process_files_tab()
        self.create_edit_main_file_tab()

    def create_process_files_tab(self):
        """
        Create the tab for processing moved files.
        """
        frame = ttk.Frame(self.notebook)
        self.notebook.add(frame, text="Process Files")

        tk.Label(frame, text="Moved File (CSV):").grid(row=0, column=0, padx=10, pady=5)
        self.moved_file_label = tk.Label(frame, text="No file selected")
        self.moved_file_label.grid(row=0, column=1, padx=10, pady=5)

        tk.Label(frame, text="Date:").grid(row=1, column=0, padx=10, pady=5)
        self.date_picker = Calendar(frame, selectmode="day", date_pattern="yyyy-mm-dd")
        self.date_picker.grid(row=1, column=1, columnspan=2, padx=10, pady=5)

        ttk.Button(frame, text="Find File", command=self.select_moved_file).grid(row=2, column=0, padx=10, pady=10)
        ttk.Button(frame, text="Process Files", command=self.process_files).grid(row=2, column=1, padx=10, pady=10)

    def create_edit_main_file_tab(self):
        """
        Create the tab for editing the main file.
        """
        frame = ttk.Frame(self.notebook)
        self.notebook.add(frame, text="Edit Main File")

        button_frame = ttk.Frame(frame)
        button_frame.grid(row=0, column=0, pady=5, sticky="ew")
        ttk.Button(button_frame, text="Save Changes", command=self.save_main_file, width=15).pack(side="left", padx=5)
        ttk.Button(button_frame, text="Refresh", command=self.refresh_main_file, width=15).pack(side="left", padx=5)
        ttk.Button(button_frame, text="Add Row", command=self.add_new_row, width=15).pack(side="left", padx=5)
        ttk.Button(button_frame, text="Edit Row", command=self.edit_selected_row, width=15).pack(side="left", padx=5)

        self.create_treeview(frame)
        self.populate_treeview()

    def create_treeview(self, frame):
        """
        Create the Treeview widget for displaying data.
        """
        self.tree = ttk.Treeview(frame, show="headings", height=15)
        self.tree["columns"] = list(self.main_data.columns)

        for col in self.main_data.columns:
            self.tree.heading(col, text=col, anchor="w")
            self.tree.column(col, width=120, anchor="w")

        scroll_y = ttk.Scrollbar(frame, orient="vertical", command=self.tree.yview)
        scroll_y.grid(row=1, column=1, sticky="ns")
        self.tree.configure(yscrollcommand=scroll_y.set)

        scroll_x = ttk.Scrollbar(frame, orient="horizontal", command=self.tree.xview)
        scroll_x.grid(row=2, column=0, sticky="ew")
        self.tree.configure(xscrollcommand=scroll_x.set)

        self.tree.grid(row=1, column=0, sticky="nsew")
        frame.grid_rowconfigure(1, weight=1)
        frame.grid_columnconfigure(0, weight=1)

    def populate_treeview(self):
        """
        Populate the Treeview with data from the main file.
        """
        self.tree.delete(*self.tree.get_children())
        for _, row in self.main_data.iterrows():
            self.tree.insert("", "end", values=list(row))


# --- Main Execution ---
if __name__ == "__main__":
    root = tk.Tk()
    app = StatementGeneratorApp(root)
    root.mainloop()
