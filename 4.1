import tkinter as tk
from tkinter import ttk, messagebox
from tkcalendar import Calendar
import pandas as pd
from datetime import datetime
import os
import shutil
from openpyxl import load_workbook
from openpyxl.styles import Alignment, Font

# --- Editable Constants ---
PRIMARY_FOLDER = r"C:\folder\primary"
SECONDARY_FOLDER = r"C:\folder\secondary"
MAIN_FILE_PATH = r"C:\folder\main_file.xlsx"
SECONDARY_FILE_PATH = r"C:\folder\secondary_file.xlsx"
TEMPLATE_FILE_PATH = r"C:\folder\template.xlsx"
OUTPUT_FOLDER = r"C:\folder\output"
HEADER_MAPPING = {
    "Trade ID": "TRADEIDENTIFIER",
    "Adjusted P&L": "Adjusted_P&L",
    "Bid": "Bid",
    "Offer": "Offer",
    "Trade Date": "TRADE DATE",
    "SPREAD": "SPREAD"
}
DEFAULT_VALUES = {
    "Sub Product": "CRA SWAP",
    "PAYER": "CHANGE",
    "Pay": "Float",
    "Pay Frequency": "1MO",
    "Pay CCY": "USD",
    "Receive": "Float",
    "Receive Index": "USD SOFR",
    "Receive Rate": "0.3",
    "Receive Frequency": "1MO",
    "Receive CCY": "USD"
}
DATE_FORMAT = "%Y-%m-%d"

# --- Utility Functions ---
def calculate_amortization(start_date, current_date, value):
    fraction_year_passed = (current_date - start_date).days / 365
    months_passed = fraction_year_passed * 12
    return max(0, value * (12 - months_passed) / 12)

def validate_data(main_data, column_names):
    """Ensure required columns exist in the data."""
    missing_columns = [col for col in column_names if col not in main_data.columns]
    if missing_columns:
        raise ValueError(f"Missing columns: {', '.join(missing_columns)}")

class Popup:
    """Reusable popup class for adding or editing rows."""
    def __init__(self, parent, title, columns, initial_values=None, on_save=None):
        self.parent = parent
        self.columns = columns
        self.initial_values = initial_values or {}
        self.on_save = on_save
        
        self.popup = tk.Toplevel(parent)
        self.popup.title(title)
        self.popup.geometry("400x600")

        self.entries = {}
        for i, col in enumerate(self.columns):
            tk.Label(self.popup, text=col).grid(row=i, column=0, padx=10, pady=5, sticky="w")

            value = self.initial_values.get(col, DEFAULT_VALUES.get(col, ""))
            entry = tk.Entry(self.popup, width=30)
            entry.insert(0, value)
            entry.grid(row=i, column=1, padx=10, pady=5)
            self.entries[col] = entry

        save_button = tk.Button(self.popup, text="Save", command=self.save_data)
        save_button.grid(row=len(self.columns), column=0, columnspan=2, pady=10)

    def save_data(self):
        try:
            new_data = {col: entry.get() for col, entry in self.entries.items()}
            if self.on_save:
                self.on_save(new_data)
            self.popup.destroy()
        except Exception as e:
            messagebox.showerror("Error", f"Failed to save data: {e}")

class DataTab:
    """A reusable class to create tabs for editing Excel data."""
    def __init__(self, notebook, tab_name, file_path):
        self.file_path = file_path
        self.data = self.load_data()

        self.frame = ttk.Frame(notebook)
        notebook.add(self.frame, text=tab_name)

        self.create_buttons()
        self.create_treeview()
        self.populate_treeview()

    def load_data(self):
        try:
            return pd.read_excel(self.file_path)
        except FileNotFoundError:
            messagebox.showerror("Error", f"File not found: {self.file_path}")
            return pd.DataFrame()

    def save_data(self):
        try:
            self.data.to_excel(self.file_path, index=False)
            messagebox.showinfo("Success", "File saved successfully.")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to save file: {e}")

    def create_buttons(self):
        button_frame = ttk.Frame(self.frame)
        button_frame.pack(fill="x", padx=5, pady=5)

        ttk.Button(button_frame, text="Save Changes", command=self.save_data).pack(side="left", padx=5)
        ttk.Button(button_frame, text="Refresh", command=self.refresh_data).pack(side="left", padx=5)
        ttk.Button(button_frame, text="Add Row", command=self.add_row).pack(side="left", padx=5)
        ttk.Button(button_frame, text="Edit Row", command=self.edit_row).pack(side="left", padx=5)

    def create_treeview(self):
        self.tree = ttk.Treeview(self.frame, show="headings", height=15)
        self.tree["columns"] = list(self.data.columns)

        for col in self.data.columns:
            self.tree.heading(col, text=col, anchor="w")
            self.tree.column(col, width=120, anchor="w")

        scroll_y = ttk.Scrollbar(self.frame, orient="vertical", command=self.tree.yview)
        scroll_y.pack(side="right", fill="y")
        self.tree.configure(yscrollcommand=scroll_y.set)

        self.tree.pack(fill="both", expand=True)

    def populate_treeview(self):
        self.tree.delete(*self.tree.get_children())
        for _, row in self.data.iterrows():
            self.tree.insert("", "end", values=list(row))

    def refresh_data(self):
        self.data = self.load_data()
        self.populate_treeview()

    def add_row(self):
        def save_new_row(new_data):
            new_row = pd.DataFrame([new_data], columns=self.data.columns)
            self.data = pd.concat([self.data, new_row], ignore_index=True)
            self.save_data()
            self.populate_treeview()

        Popup(self.frame, "Add Row", self.data.columns, on_save=save_new_row)

    def edit_row(self):
        selected_item = self.tree.focus()
        if not selected_item:
            messagebox.showerror("Error", "No row selected.")
            return

        row_index = int(self.tree.index(selected_item))
        initial_values = self.data.iloc[row_index].to_dict()

        def save_edited_row(edited_data):
            self.data.iloc[row_index] = edited_data
            self.save_data()
            self.populate_treeview()

        Popup(self.frame, "Edit Row", self.data.columns, initial_values, on_save=save_edited_row)

class StatementGeneratorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Statement Generator")
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill="both", expand=True)

        self.create_process_files_tab()
        DataTab(self.notebook, "Main File", MAIN_FILE_PATH)
        DataTab(self.notebook, "Secondary Data", SECONDARY_FILE_PATH)

    def create_process_files_tab(self):
        frame = ttk.Frame(self.notebook)
        self.notebook.add(frame, text="Process Files")

        tk.Label(frame, text="Date:").grid(row=0, column=0, padx=10, pady=5)
        self.date_picker = Calendar(frame, selectmode="day", date_pattern="yyyy-mm-dd")
        self.date_picker.grid(row=0, column=1, padx=10, pady=5)

        tk.Button(frame, text="Find File", command=self.select_moved_file).grid(row=1, column=0, padx=10, pady=10)
        tk.Button(frame, text="Process Files", command=self.process_files).grid(row=1, column=1, padx=10, pady=10)

    def select_moved_file(self):
        selected_date = self.date_picker.get_date()
        formatted_date = datetime.strptime(selected_date, "%Y-%m-%d").strftime("%Y-%m-%d")
        expected_file_name = f"moved_file_{formatted_date}.csv"

        primary_path = os.path.join(PRIMARY_FOLDER, expected_file_name)
        if os.path.exists(primary_path):
            self.moved_file_path = primary_path
            messagebox.showinfo("File Found", f"File found: {self.moved_file_path}")
            return

        secondary_path = os.path.join(SECONDARY_FOLDER, expected_file_name)
        if os.path.exists(secondary_path):
            shutil.copy(secondary_path, primary_path)
            self.moved_file_path = primary_path
            messagebox.showinfo("File Copied", f"File copied to primary folder: {self.moved_file_path}")
            return

        messagebox.showerror("Error", "File not found in either folder.")

    def process_files(self):
        if not self.moved_file_path:
            messagebox.showerror("Error", "Please select a moved file.")
            return
        messagebox.showinfo("Info", "Processing logic placeholder")

# --- Main Execution ---
if __name__ == "__main__":
    root = tk.Tk()
    app = StatementGeneratorApp(root)
    root.mainloop()
