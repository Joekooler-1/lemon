import tkinter as tk
from tkinter import filedialog, messagebox, ttk
from tkcalendar import Calendar
import pandas as pd
from datetime import datetime
import os
import shutil
from openpyxl import load_workbook
from openpyxl.styles import Alignment, Font

# --- Editable Constants ---
PRIMARY_FOLDER = r"C:\folder\primary"  # Edit to your primary folder path
SECONDARY_FOLDER = r"C:\folder\secondary"  # Edit to your secondary folder path
MAIN_FILE_PATH = r"C:\folder\main_file.xlsx"  # Edit to your main file path
TEMPLATE_FILE_PATH = r"C:\folder\template.xlsx"  # Edit to your template file path
OUTPUT_FOLDER = r"C:\folder\output"  # Edit to your output folder path

# Header mappings between template headers and processed data
HEADER_MAPPING = {
    "TRADE ID": "TRADEIDENTIFIER",
    "Adjusted P&L": "Adjusted_P&L",
    "Bid": "Bid",
    "Offer": "Offer",
    "TRADE DATE": "TRADE DATE",
    "SPREAD": "SPREAD"
}

# Default values for new rows
DEFAULT_VALUES = {
    "Sub Product": "CRA SWAP",
    "PAYER": "CHANGE",
    "Pay": "Float",
    "Pay Frequency": "1MO",
    "Pay CCY": "USD",
    "Receive": "Float",
    "Receive Index": "USD SOFR",
    "Receive Rate": "0.3",
    "Receive Frequency": "1MO",
    "Receive CCY": "USD"
}

DATE_COLUMNS = {"TRADE DATE", "Effective Date", "Maturity Date"}
DATE_FORMAT = "%Y-%m-%d"


def calculate_amortization(start_date, current_date, value):
    """
    Calculate the amortized value for the given time period.

    Args:
        start_date (datetime): Start date of the amortization.
        current_date (datetime): Current date for calculation.
        value (float): Value to amortize.

    Returns:
        float: Amortized value adjusted for the elapsed time.
    """
    fraction_year_passed = (current_date - start_date).days / 365
    months_passed = fraction_year_passed * 12
    return max(0, value * (12 - months_passed) / 12)


class StatementGeneratorApp:
    """
    GUI-based statement generator for managing, processing, and generating client-specific data files.
    """

    def __init__(self, root):
        """
        Initialize the application, load data, and create UI components.

        Args:
            root (tk.Tk): Root Tkinter window.
        """
        self.root = root
        self.root.title("Statement Generator")

        # Paths
        self.main_file_path = MAIN_FILE_PATH
        self.moved_file_path = None

        # Load main data
        self.main_data = self.load_main_file()

        # Create UI components
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill="both", expand=True)
        self.create_tabs()

    # --- File Operations ---
    def load_main_file(self):
        """
        Load the main file into a DataFrame.
        """
        try:
            return pd.read_excel(self.main_file_path)
        except FileNotFoundError:
            messagebox.showerror("Error", f"Main file not found at {self.main_file_path}")
            self.root.destroy()
            return None

    def save_main_file(self):
        """
        Save changes to the main file.
        """
        try:
            self.main_data.to_excel(self.main_file_path, index=False)
            messagebox.showinfo("Success", "Main file saved successfully.")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to save the main file: {e}")

    def refresh_main_file(self):
        """
        Reload the main file and update the Treeview with the latest data.
        """
        try:
            self.main_data = self.load_main_file()
            self.populate_treeview()
            messagebox.showinfo("Success", "Main file refreshed successfully.")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to refresh the main file: {e}")

    def select_moved_file(self):
        """
        Automatically select the moved file based on the selected date.
        Searches the primary folder first, then the secondary folder.
        If found in the secondary folder, copies it to the primary folder.
        """
        selected_date = self.date_picker.get_date()
        formatted_date = datetime.strptime(selected_date, "%Y-%m-%d").strftime("%Y-%m-%d")
        expected_file_name = f"moved_file_{formatted_date}.csv"

        primary_path = os.path.join(PRIMARY_FOLDER, expected_file_name)
        if os.path.exists(primary_path):
            self.moved_file_path = primary_path
            self.moved_file_label.config(text=f"File found: {self.moved_file_path}")
            return

        secondary_path = os.path.join(SECONDARY_FOLDER, expected_file_name)
        if os.path.exists(secondary_path):
            shutil.copy(secondary_path, primary_path)
            self.moved_file_path = primary_path
            self.moved_file_label.config(text=f"File copied: {self.moved_file_path}")
            return

        self.moved_file_label.config(text="File not found in either folder.")
        self.moved_file_path = None

    # --- Data Processing ---
    def process_files(self):
        """
        Process the main and moved files, generate calculations, and prepare the output.
        """
        if not self.moved_file_path:
            messagebox.showerror("Error", "Please select a moved file.")
            return

        if not os.path.exists(TEMPLATE_FILE_PATH):
            messagebox.showerror("Error", f"Template file not found: {TEMPLATE_FILE_PATH}")
            return

        try:
            moved_data = pd.read_csv(self.moved_file_path)
            moved_data['TRADEIDENTIFIER'] = moved_data['TRADEIDENTIFIER'].str[:7]

            self.main_data['TRADEIDENTIFIER'] = self.main_data['TRADEIDENTIFIER'].astype(str)
            processed_data = self.main_data.merge(moved_data[['TRADEIDENTIFIER', 'PV']], on='TRADEIDENTIFIER', how='left')
            processed_data['PV'] = processed_data['PV'].fillna(0) * -1

            selected_date = datetime.strptime(self.date_picker.get_date(), DATE_FORMAT)

            def calculate_row(row):
                if pd.notna(row.get('P&L')) and pd.notna(row.get('TRADE DATE')):
                    start_date = pd.to_datetime(row['TRADE DATE'])
                    adjusted_pnl = calculate_amortization(start_date, selected_date, float(row['P&L']))
                    combined_value = row['PV'] + adjusted_pnl
                    bid = combined_value - (2 / 3) * float(row.get('SPREAD', 0))
                    offer = combined_value + (1 / 3) * float(row.get('SPREAD', 0))
                    return pd.Series([adjusted_pnl, combined_value, bid, offer])
                return pd.Series([None, None, None, None])

            processed_data[['Adjusted_P&L', 'Combined_Value', 'Bid', 'Offer']] = processed_data.apply(calculate_row, axis=1)

            fund_column = "FUND ID"
            if fund_column not in processed_data.columns:
                messagebox.showerror("Error", f"Column '{fund_column}' not found in processed data.")
                return

            unique_funds = processed_data[fund_column].dropna().unique()
            for fund_id in unique_funds:
                client_data = processed_data[processed_data[fund_column] == fund_id]
                self.fill_template(fund_id, client_data)

            messagebox.showinfo("Success", "Statements generated successfully.")
        except Exception as e:
            messagebox.showerror("Error", f"An error occurred while processing: {e}")

    def fill_template(self, fund_id, data):
        """
        Fill the Excel template with processed data for a specific client.
        """
        workbook = load_workbook(TEMPLATE_FILE_PATH)
        sheet = workbook.active

        # Remove external links if present
        if hasattr(workbook, "remove_external_links"):
            workbook.remove_external_links()

        # Set FUND ID and date in the template
        sheet["C12"] = f"DAILY_BMO - {fund_id} Lon_IRS"
        sheet["C14"] = self.date_picker.get_date()

        # Set tab (sheet) name
        sheet.title = f"BMO - {fund_id}"

        # Get headers and map them to their corresponding columns
        headers = [sheet.cell(row=18, column=col).value for col in range(2, sheet.max_column + 1)]
        start_row = 18

        # Define cell styles
        center_alignment = Alignment(horizontal="center", vertical="center")
        default_font = Font(size=8)
        currency_format = "#,##0.00"
        percentage_format = "0.000%"

        # Iterate over the data rows and insert them into the template
        for idx, row in data.iterrows():
            sheet.insert_rows(start_row + idx + 1)  # Insert a new row
            for col_idx, header in enumerate(headers):
                mapped_header = HEADER_MAPPING.get(header, header)
                value = row.get(mapped_header, "")
                cell = sheet.cell(row=start_row + idx + 1, column=col_idx + 2)
                cell.value = value

                # Apply alignment and font styles
                cell.alignment = center_alignment
                cell.font = default_font

                # Apply specific formats for currency and percentage columns
                if header in ["Notional", "Notional 2"]:
                    cell.number_format = currency_format
                elif header in ["Pay Rate", "BID", "OFFER"]:
                    cell.number_format = percentage_format

        # Save the updated workbook with the tab name updated
        excel_output_path = os.path.join(OUTPUT_FOLDER, f"{fund_id}_statement.xlsx")
        workbook.save(excel_output_path)

    # --- UI Components ---
    def create_tabs(self):
        """
        Create tabs for managing data and processing files.
        """
        self.create_process_files_tab()
        self.create_edit_main_file_tab()

    def create_process_files_tab(self):
        """
        Create the tab for processing moved files.
        """
        frame = ttk.Frame(self.notebook)
        self.notebook.add(frame, text="Process Files")

        tk.Label(frame, text="Moved File (CSV):").grid(row=0, column=0, padx=10, pady=5)
        self.moved_file_label = tk.Label(frame, text="No file selected")
        self.moved_file_label.grid(row=0, column=1, padx=10, pady=5)

        tk.Label(frame, text="Date:").grid(row=1, column=0, padx=10, pady=5)
        self.date_picker = Calendar(frame, selectmode="day", date_pattern="yyyy-mm-dd")
        self.date_picker.grid(row=1, column=1, columnspan=2, padx=10, pady=5)

        ttk.Button(frame, text="Find File", command=self.select_moved_file).grid(row=2, column=0, padx=10, pady=10)
        ttk.Button(frame, text="Process Files", command=self.process_files).grid(row=2, column=1, padx=10, pady=10)

    def create_edit_main_file_tab(self):
        """
        Create the tab for editing the main file.
        """
        frame = ttk.Frame(self.notebook)
        self.notebook.add(frame, text="Edit Main File")

        button_frame = ttk.Frame(frame)
        button_frame.grid(row=0, column=0, pady=5, sticky="ew")
        ttk.Button(button_frame, text="Save Changes", command=self.save_main_file, width=15).pack(side="left", padx=5)
        ttk.Button(button_frame, text="Refresh", command=self.refresh_main_file, width=15).pack(side="left", padx=5)

        self.create_treeview(frame)
        self.populate_treeview()

    def create_treeview(self, frame):
        """
        Create the Treeview widget for displaying data.
        """
        self.tree = ttk.Treeview(frame, show="headings", height=15)
        self.tree["columns"] = list(self.main_data.columns)

        for col in self.main_data.columns:
            self.tree.heading(col, text=col, anchor="w")
            self.tree.column(col, width=120, anchor="w")

        scroll_y = ttk.Scrollbar(frame, orient="vertical", command=self.tree.yview)
        scroll_y.grid(row=1, column=1, sticky="ns")
        self.tree.configure(yscrollcommand=scroll_y.set)

        scroll_x = ttk.Scrollbar(frame, orient="horizontal", command=self.tree.xview)
        scroll_x.grid(row=2, column=0, sticky="ew")
        self.tree.configure(xscrollcommand=scroll_x.set)

        self.tree.grid(row=1, column=0, sticky="nsew")
        frame.grid_rowconfigure(1, weight=1)
        frame.grid_columnconfigure(0, weight=1)

    def populate_treeview(self):
        """
        Populate the Treeview with data from the main file.
        """
        self.tree.delete(*self.tree.get_children())
        for _, row in self.main_data.iterrows():
            self.tree.insert("", "end", values=list(row))


# --- Main Execution ---
if __name__ == "__main__":
    root = tk.Tk()
    app = StatementGeneratorApp(root)
    root.mainloop()
