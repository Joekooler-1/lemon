import tkinter as tk
from tkinter import filedialog, messagebox, ttk
from tkcalendar import Calendar
import pandas as pd
from datetime import datetime
import os
import shutil
import tempfile
from openpyxl.styles import numbers


# --- Editable Constants ---
PRIMARY_FOLDER = r"C:\folder\primary"  # <-- Edit this to your primary folder path
SECONDARY_FOLDER = r"C:\folder\secondary"  # <-- Edit this to your secondary folder path
MAIN_FILE_PATH = r"C:\folder\main_file.xlsx"  # <-- Edit this to your main file path

# --- Constants ---
DEFAULT_VALUES = {
    "Sub Product": "CRA SWAP",
    "PAYER": "CHANGE",
    "Pay": "Float",
    "Pay Frequency": "1MO",
    "Pay CCY": "USD",
    "Receive": "Float",
    "Receive Index": "USD SOFR",
    "Receive Rate": "0.3",
    "Receive Frequency": "1MO",
    "Receive CCY": "USD",
}
DATE_COLUMNS = {"TRADE DATE", "Effective Date", "Maturity Date"}
NUMERIC_COLUMNS = {"Receive Rate", "Bid", "Offer", "PV", "SPREAD"}
DATE_FORMAT = "%Y-%m-%d"


class StatementGeneratorApp:
    """
    A GUI application for managing and processing trade data using Tkinter.
    """

    def __init__(self, root):
        """
        Initialize the application, load data, and create the UI.

        Args:
            root (tk.Tk): The root Tkinter window.
        """
        self.root = root
        self.root.title("Statement Generator")

        # Paths
        self.main_file_path = MAIN_FILE_PATH
        self.moved_file_path = None

        # Load data
        self.main_data = self.load_main_file()

        # Create UI components
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill="both", expand=True)
        self.create_tabs()

    # --- File Operations ---
    def load_main_file(self):
        try:
            return pd.read_excel(self.main_file_path)
        except FileNotFoundError:
            messagebox.showerror("Error", f"Main file not found at {self.main_file_path}")
            self.root.destroy()
            return None

    def save_main_file(self):
        try:
            self.main_data.to_excel(self.main_file_path, index=False)
            messagebox.showinfo("Success", "Main file saved successfully.")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to save the main file: {e}")

    def refresh_main_file(self):
        try:
            self.main_data = self.load_main_file()
            self.populate_treeview()
            messagebox.showinfo("Success", "Main file refreshed successfully.")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to refresh the main file: {e}")

    def process_files(self):
        """
        Process the main and moved files.
        """
        if not self.moved_file_path:
            messagebox.showerror("Error", "Please select a moved file.")
            return

        try:
            moved_data = pd.read_csv(self.moved_file_path)
            processed_data = self.preprocess_data(moved_data)
            self.display_in_excel(processed_data)
        except Exception as e:
            messagebox.showerror("Error", f"An error occurred: {e}")

    def preprocess_data(self, moved_data):
        moved_data['TRADEIDENTIFIER'] = moved_data['TRADEIDENTIFIER'].str[:7]
        self.main_data['TRADEIDENTIFIER'] = self.main_data['TRADEIDENTIFIER'].astype(str)

        # Merge and calculate adjusted fields
        main_data = self.main_data.merge(moved_data[['TRADEIDENTIFIER', 'PV']], on='TRADEIDENTIFIER', how='left')
        main_data['PV'] = main_data['PV'].fillna(0) * -1

        current_date = datetime.strptime(self.date_picker.get_date(), DATE_FORMAT)

        def calculate_row(row):
            if pd.notna(row.get('P&L')) and pd.notna(row.get('TRADE DATE')):
                start_date = pd.to_datetime(row['TRADE DATE'])
                adjusted_pnl = calculate_amortization(start_date, current_date, float(row['P&L']))
                combined_value = row['PV'] + adjusted_pnl
                bid = combined_value - (2 / 3) * float(row.get('SPREAD', 0))
                offer = combined_value + (1 / 3) * float(row.get('SPREAD', 0))
                return pd.Series([adjusted_pnl, combined_value, bid, offer])
            return pd.Series([None, None, None, None])

        main_data[['Adjusted_P&L', 'Combined_Value', 'Bid', 'Offer']] = main_data.apply(calculate_row, axis=1)
        return main_data

    def display_in_excel(self, dataframe):
        with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp:
            temp_filename = tmp.name

        with pd.ExcelWriter(temp_filename, engine="openpyxl") as writer:
            dataframe.to_excel(writer, index=False, sheet_name="Processed Data")
            workbook = writer.book
            worksheet = writer.sheets["Processed Data"]

            for col_idx, col_name in enumerate(dataframe.columns, 1):
                if col_name in DATE_COLUMNS:
                    for row in range(2, len(dataframe) + 2):
                        worksheet.cell(row=row, column=col_idx).number_format = "mm/dd/yyyy"
                elif col_name in ["Notional", "Notional 2"]:
                    for row in range(2, len(dataframe) + 2):
                        worksheet.cell(row=row, column=col_idx).number_format = "$#,##0.00"
                elif col_name in ["Pay Rate"]:
                    for row in range(2, len(dataframe) + 2):
                        worksheet.cell(row=row, column=col_idx).number_format = "0.00%"
                elif col_name in ["Bid", "Offer"]:
                    for row in range(2, len(dataframe) + 2):
                        worksheet.cell(row=row, column=col_idx).number_format = "0.000%"

        os.startfile(temp_filename)

    def create_process_files_tab(self):
        """
        Create the tab for processing moved files.
        """
        frame = ttk.Frame(self.notebook)
        self.notebook.add(frame, text="Process Files")

        tk.Label(frame, text="Moved File (CSV):").grid(row=0, column=0, padx=10, pady=5)
        self.moved_file_label = tk.Label(frame, text="No file selected")
        self.moved_file_label.grid(row=0, column=1, padx=10, pady=5)

        tk.Label(frame, text="Date:").grid(row=1, column=0, padx=10, pady=5)
        self.date_picker = Calendar(frame, selectmode="day", date_pattern="yyyy-mm-dd")
        self.date_picker.grid(row=1, column=1, columnspan=2, padx=10, pady=5)

        ttk.Button(frame, text="Find File", command=self.select_moved_file).grid(row=2, column=0, padx=10, pady=10)
        ttk.Button(frame, text="Process Files", command=self.process_files).grid(row=2, column=1, padx=10, pady=10)


# --- Main Execution ---
if __name__ == "__main__":
    root = tk.Tk()
    app = StatementGeneratorApp(root)
    root.mainloop()
