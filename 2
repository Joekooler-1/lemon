import tkinter as tk
from tkinter import filedialog, messagebox, ttk
from tkcalendar import Calendar
import pandas as pd
from datetime import datetime
import os
import tempfile
from openpyxl.styles import numbers


# --- Constants ---
DEFAULT_VALUES = {
    "Sub Product": "CRA SWAP",
    "PAYER": "CHANGE",
    "Pay": "Float",
    "Pay Frequency": "1MO",
    "Pay CCY": "USD",
    "Receive": "Float",
    "Receive Index": "USD SOFR",
    "Receive Rate": "0.3",
    "Receive Frequency": "1MO",
    "Receive CCY": "USD",
}
DATE_COLUMNS = {"TRADE DATE", "Effective Date", "Maturity Date"}
NUMERIC_COLUMNS = {"Receive Rate", "Bid", "Offer", "PV", "SPREAD"}
DATE_FORMAT = "%Y-%m-%d"


# --- Amortization Function ---
def calculate_amortization(start_date, current_date, value):
    """
    Calculate the amortized value for the given time period.

    Args:
        start_date (datetime): Start date of the amortization.
        current_date (datetime): Current date to calculate amortization.
        value (float): Value to amortize.

    Returns:
        float: Amortized value adjusted for the elapsed time.
    """
    fraction_year_passed = (current_date - start_date).days / 365
    months_passed = fraction_year_passed * 12
    return max(0, value * (12 - months_passed) / 12)


class StatementGeneratorApp:
    """
    A GUI application for managing and processing trade data using Tkinter.
    """

    def __init__(self, root):
        """
        Initialize the application, load data, and create the UI.

        Args:
            root (tk.Tk): The root Tkinter window.
        """
        self.root = root
        self.root.title("Statement Generator")

        # Paths
        self.main_file_path = r"C:\folder\main_file.xlsx"  # Change to your main file path
        self.moved_file_path = None

        # Load data
        self.main_data = self.load_main_file()

        # Create UI components
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill="both", expand=True)
        self.create_tabs()

    # --- File Operations ---
    def load_main_file(self):
        """
        Load the main file into a DataFrame.

        Returns:
            pd.DataFrame: The loaded main file data.
        """
        try:
            return pd.read_excel(self.main_file_path)
        except FileNotFoundError:
            messagebox.showerror("Error", f"Main file not found at {self.main_file_path}")
            self.root.destroy()
            return None

    def save_main_file(self):
        """
        Save the current state of the main file to its path.
        """
        try:
            self.main_data.to_excel(self.main_file_path, index=False)
            messagebox.showinfo("Success", "Main file saved successfully.")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to save the main file: {e}")

    def save_changes_to_main_file(self):
        """
        Save changes made in the Treeview back to the main file DataFrame.
        Updates the self.main_data DataFrame with the current Treeview data
        and writes it to the main file.
        """
        try:
            # Clear the main DataFrame and repopulate it with Treeview data
            self.main_data = pd.DataFrame(columns=self.tree["columns"])
            for row_id in self.tree.get_children():
                self.main_data.loc[len(self.main_data)] = self.tree.item(row_id)["values"]

            # Save the updated data to the main file
            self.save_main_file()
        except Exception as e:
            messagebox.showerror("Error", f"Failed to save changes: {e}")

    def refresh_main_file(self):
        """
        Reload the main file and refresh the Treeview with updated data.
        """
        self.main_data = self.load_main_file()
        self.populate_treeview()

    # --- Data Processing ---
    def preprocess_data(self, moved_data):
        """
        Preprocess the main and moved data, applying calculations for P&L, Bid, and Offer.

        Args:
            moved_data (pd.DataFrame): The moved file data.

        Returns:
            pd.DataFrame: The processed data.
        """
        moved_data['TRADEIDENTIFIER'] = moved_data['TRADEIDENTIFIER'].str[:7]
        self.main_data['TRADEIDENTIFIER'] = self.main_data['TRADEIDENTIFIER'].astype(str)

        # Merge and calculate adjusted fields
        main_data = self.main_data.merge(moved_data[['TRADEIDENTIFIER', 'PV']], on='TRADEIDENTIFIER', how='left')
        main_data['PV'] = main_data['PV'].fillna(0) * -1

        current_date = datetime.strptime(self.date_picker.get_date(), DATE_FORMAT)

        def calculate_row(row):
            if pd.notna(row.get('P&L')) and pd.notna(row.get('TRADE DATE')):
                start_date = pd.to_datetime(row['TRADE DATE'])
                adjusted_pnl = calculate_amortization(start_date, current_date, float(row['P&L']))
                combined_value = row['PV'] + adjusted_pnl
                bid = combined_value - (2 / 3) * float(row.get('SPREAD', 0))
                offer = combined_value + (1 / 3) * float(row.get('SPREAD', 0))
                return pd.Series([adjusted_pnl, combined_value, bid, offer])
            return pd.Series([None, None, None, None])

        main_data[['Adjusted_P&L', 'Combined_Value', 'Bid', 'Offer']] = main_data.apply(calculate_row, axis=1)
        return main_data

    def display_in_excel(self, dataframe):
        """
        Display the processed DataFrame in Excel with formatting.

        Args:
            dataframe (pd.DataFrame): The processed data.
        """
        with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp:
            temp_filename = tmp.name

        with pd.ExcelWriter(temp_filename, engine="openpyxl") as writer:
            dataframe.to_excel(writer, index=False, sheet_name="Processed Data")
            workbook = writer.book
            worksheet = writer.sheets["Processed Data"]

            for col_idx, col_name in enumerate(dataframe.columns, 1):
                if col_name in DATE_COLUMNS:
                    for row in range(2, len(dataframe) + 2):
                        worksheet.cell(row=row, column=col_idx).number_format = "mm/dd/yyyy"
                elif col_name in ["Notional", "Notional 2"]:
                    for row in range(2, len(dataframe) + 2):
                        worksheet.cell(row=row, column=col_idx).number_format = "$#,##0.00"
                elif col_name in ["Pay Rate"]:
                    for row in range(2, len(dataframe) + 2):
                        worksheet.cell(row=row, column=col_idx).number_format = "0.00%"
                elif col_name in ["Bid", "Offer"]:
                    for row in range(2, len(dataframe) + 2):
                        worksheet.cell(row=row, column=col_idx).number_format = "0.000%"

        os.startfile(temp_filename)

    # --- UI Components ---
    def create_tabs(self):
        """
        Create tabs for editing the main file and processing moved files.
        """
        self.create_process_files_tab()
        self.create_edit_main_file_tab()

    def create_process_files_tab(self):
        """
        Create the tab for processing moved files.
        """
        frame = ttk.Frame(self.notebook)
        self.notebook.add(frame, text="Process Files")

        tk.Label(frame, text="Moved File (CSV):").grid(row=0, column=0, padx=10, pady=5)
        self.moved_file_label = tk.Label(frame, text="No file selected")
        self.moved_file_label.grid(row=0, column=1, padx=10, pady=5)
        ttk.Button(frame, text="Browse", command=self.select_moved_file).grid(row=0, column=2, padx=10, pady=5)

        tk.Label(frame, text="Date:").grid(row=1, column=0, padx=10, pady=5)
        self.date_picker = Calendar(frame, selectmode="day", date_pattern="yyyy-mm-dd")
        self.date_picker.grid(row=1, column=1, columnspan=2, padx=10, pady=5)

        ttk.Button(frame, text="Process Files", command=self.process_files).grid(row=2, column=1, padx=10, pady=10)

    def create_edit_main_file_tab(self):
        """
        Create the tab for editing the main file.
        """
        frame = ttk.Frame(self.notebook)
        self.notebook.add(frame, text="Edit Main File")

        # Button Frame at the top
        button_frame = ttk.Frame(frame)
        button_frame.grid(row=0, column=0, pady=5, sticky="ew")

        # Buttons in a row
        ttk.Button(button_frame, text="Save Changes", command=self.save_changes_to_main_file, width=15).pack(side="left", padx=5)
        ttk.Button(button_frame, text="Edit Selected Row", command=self.edit_selected_row, width=15).pack(side="left", padx=5)
        ttk.Button(button_frame, text="Add New Row", command=self.add_new_row, width=15).pack(side="left", padx=5)
        ttk.Button(button_frame, text="Refresh", command=self.refresh_main_file, width=15).pack(side="left", padx=5)

        # Create Treeview below
        self.create_treeview(frame)
        self.populate_treeview()

    # --- Processing Files ---
    def select_moved_file(self):
        """
        Open a file dialog to select a moved file.
        """
        self.moved_file_path = filedialog.askopenfilename(filetypes=[("CSV files", "*.csv")])
        self.moved_file_label.config(text=self.moved_file_path if self.moved_file_path else "No file selected")

    def process_files(self):
        """
        Process the main and moved files.
        """
        if not self.moved_file_path:
            messagebox.showerror("Error", "Please select a moved file.")
            return

        try:
            moved_data = pd.read_csv(self.moved_file_path)
            processed_data = self.preprocess_data(moved_data)
            self.display_in_excel(processed_data)
        except Exception as e:
            messagebox.showerror("Error", f"An error occurred: {e}")

    def create_treeview(self, frame):
        """
        Create and configure a Treeview widget for displaying data.

        Args:
            frame (ttk.Frame): The parent frame for the Treeview.
        """
        self.tree = ttk.Treeview(frame, show="headings", height=15)
        self.tree["columns"] = list(self.main_data.columns)

        for col in self.main_data.columns:
            self.tree.heading(col, text=col, anchor="w")
            self.tree.column(col, width=120, anchor="w")

        scroll_y = ttk.Scrollbar(frame, orient="vertical", command=self.tree.yview)
        scroll_y.grid(row=1, column=1, sticky="ns")
        self.tree.configure(yscrollcommand=scroll_y.set)

        scroll_x = ttk.Scrollbar(frame, orient="horizontal", command=self.tree.xview)
        scroll_x.grid(row=2, column=0, sticky="ew")
        self.tree.configure(xscrollcommand=scroll_x.set)

        self.tree.grid(row=1, column=0, sticky="nsew")
        frame.grid_rowconfigure(1, weight=1)
        frame.grid_columnconfigure(0, weight=1)

    # --- Editing Rows ---
    def edit_selected_row(self):
        """
        Edit the selected row in the Treeview.
        """
        selected_item = self.tree.focus()
        if not selected_item:
            messagebox.showwarning("Warning", "No row selected.")
            return

        current_values = self.tree.item(selected_item)["values"]
        popup = self.create_popup("Edit Row", current_values)

        def save_changes():
            new_values = self.validate_and_format_entries(popup["entries"])
            if new_values:
                self.tree.item(selected_item, values=new_values)
                self.save_changes_to_main_file()
                self.refresh_main_file()
                popup["window"].destroy()

        ttk.Button(popup["window"], text="Save Changes", command=save_changes).grid(row=len(self.tree["columns"]), column=0, columnspan=2, pady=10)

    def add_new_row(self):
        """
        Add a new row to the Treeview and refresh the file.
        """
        popup = self.create_popup("Add New Row")

        def add_row():
            new_values = self.validate_and_format_entries(popup["entries"])
            if new_values:
                self.tree.insert("", "end", values=new_values)
                self.save_changes_to_main_file()
                self.refresh_main_file()
                popup["window"].destroy()

        ttk.Button(popup["window"], text="Add Row", command=add_row).grid(row=len(self.tree["columns"]), column=0, columnspan=2, pady=10)

    def create_popup(self, title, default_values=None):
        """
        Create a popup window for adding or editing a row.

        Args:
            title (str): The title of the popup window.
            default_values (list, optional): Default values for the row. Defaults to None.

        Returns:
            dict: Contains the popup window and the Entry widgets for each column.
        """
        popup = tk.Toplevel(self.root)
        popup.title(title)
        entries = {}

        for i, col in enumerate(self.tree["columns"]):
            tk.Label(popup, text=col).grid(row=i, column=0, padx=10, pady=5)
            entry = tk.Entry(popup)
            value = default_values[i] if default_values else DEFAULT_VALUES.get(col, "")
            entry.insert(0, value)
            entry.grid(row=i, column=1, padx=10, pady=5)
            entries[col] = entry

        return {"window": popup, "entries": entries}


# --- Main Execution ---
if __name__ == "__main__":
    root = tk.Tk()
    app = StatementGeneratorApp(root)
    root.mainloop()
