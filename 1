import tkinter as tk
from tkinter import filedialog, messagebox, ttk
from tkcalendar import Calendar
import pandas as pd
from datetime import datetime
import os
import shutil
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

def calculate_amortization(start_date, current_date, value):
    """
    Calculate the remaining amortized value.

    Args:
        start_date (datetime): Start date of the amortization period.
        current_date (datetime): Current date for which amortization is calculated.
        value (float): The value to amortize.

    Returns:
        float: Remaining amortized value.
    """
    # Calculate fraction of the year passed
    fraction_year_passed = (current_date - start_date).days / 365
    # Convert to months
    months_passed = fraction_year_passed * 12
    # Calculate remaining value
    remaining_value = max(0, value * (12 - months_passed) / 12)
    return remaining_value


class FileCopyHandler(FileSystemEventHandler):
    """
    Handler for copying files from the incoming folder to the moved folder.
    """
    def __init__(self, incoming_folder, moved_folder, app):
        self.incoming_folder = incoming_folder
        self.moved_folder = moved_folder
        self.app = app

    def on_created(self, event):
        """
        Triggered when a new file is created in the monitored folder.
        Copies the file to the moved folder and updates the app with the new file path.
        """
        if not event.is_directory:
            src_path = event.src_path
            dest_path = os.path.join(self.moved_folder, os.path.basename(src_path))
            shutil.copy(src_path, dest_path)  # Copies the file instead of moving
            messagebox.showinfo("File Copied", f"Copied file: {src_path} to {dest_path}")
            self.app.update_moved_file(dest_path)


class StatementGeneratorApp:
    """
    Main application for processing financial statements.
    """
    def __init__(self, root):
        self.root = root
        self.root.title("Statement Generator")

        # Directories for file management
        self.incoming_folder = "./incoming_files"  # Folder to monitor for new files
        self.moved_folder = "./moved_files"        # Folder to move files to
        os.makedirs(self.incoming_folder, exist_ok=True)
        os.makedirs(self.moved_folder, exist_ok=True)

        # File paths
        self.main_file_path = None  # Path to the main file
        self.moved_file_path = None  # Path to the moved file

        # Main File Selector
        tk.Label(root, text="Main File:").grid(row=0, column=0, padx=10, pady=5)
        self.main_file_label = tk.Label(root, text="No file selected")
        self.main_file_label.grid(row=0, column=1, padx=10, pady=5)
        tk.Button(root, text="Browse", command=self.select_main_file).grid(row=0, column=2, padx=10, pady=5)

        # Moved File Display
        tk.Label(root, text="Moved File:").grid(row=1, column=0, padx=10, pady=5)
        self.moved_file_label = tk.Label(root, text="No file detected yet")
        self.moved_file_label.grid(row=1, column=1, columnspan=2, padx=10, pady=5)

        # Date Selector
        tk.Label(root, text="Date:").grid(row=2, column=0, padx=10, pady=5)
        self.date_picker = Calendar(root, selectmode="day", date_pattern="yyyy-mm-dd")
        self.date_picker.grid(row=2, column=1, columnspan=2, padx=10, pady=5)

        # Process Button
        tk.Button(root, text="Process Files", command=self.process_files).grid(row=3, column=1, padx=10, pady=10)

        # Data Display Treeview
        self.tree = ttk.Treeview(root, show="headings")
        self.tree.grid(row=4, column=0, columnspan=3, padx=10, pady=10, sticky="nsew")

        # Add Scrollbars to Treeview
        self.scroll_x = ttk.Scrollbar(root, orient="horizontal", command=self.tree.xview)
        self.scroll_x.grid(row=5, column=0, columnspan=3, sticky="ew")
        self.scroll_y = ttk.Scrollbar(root, orient="vertical", command=self.tree.yview)
        self.scroll_y.grid(row=4, column=3, sticky="ns")
        self.tree.configure(xscrollcommand=self.scroll_x.set, yscrollcommand=self.scroll_y.set)

        # Start folder monitoring
        self.start_file_monitoring()

    def start_file_monitoring(self):
        """
        Starts monitoring the incoming folder for new files.
        """
        self.observer = Observer()
        self.event_handler = FileCopyHandler(self.incoming_folder, self.moved_folder, self)
        self.observer.schedule(self.event_handler, self.incoming_folder, recursive=False)
        self.observer.start()

    def update_moved_file(self, moved_file_path):
        """
        Updates the app with the path of the newly detected file.
        """
        self.moved_file_path = moved_file_path
        self.moved_file_label.config(text=f"Detected: {os.path.basename(moved_file_path)}")

    def select_main_file(self):
        """
        Opens a file dialog for the user to select the main file.
        """
        self.main_file_path = filedialog.askopenfilename(filetypes=[("Excel files", "*.xlsx")])
        if self.main_file_path:
            self.main_file_label.config(text=self.main_file_path)

    def process_files(self):
        """
        Processes the main file and the moved file.
        Calculates adjusted P&L, combined value, Bid, and Offer.
        """
        # Validate inputs
        if not self.main_file_path or not self.moved_file_path:
            messagebox.showerror("Error", "Please ensure both main and moved files are available.")
            return

        try:
            # Load main file and moved file
            main_data = pd.read_excel(self.main_file_path)
            moved_data = pd.read_excel(self.moved_file_path)

            # Ensure TRADEIDENTIFIER matches
            moved_data['TRADEIDENTIFIER'] = moved_data['TRADEIDENTIFIER'].str[:7]
            main_data['TRADEIDENTIFIER'] = main_data['TRADEIDENTIFIER'].astype(str)
            moved_data['TRADEIDENTIFIER'] = moved_data['TRADEIDENTIFIER'].astype(str)

            # Merge PV from moved file into main file
            main_data = main_data.merge(
                moved_data[['TRADEIDENTIFIER', 'PV']],
                on='TRADEIDENTIFIER',
                how='left'
            )

            # Get the selected date for processing
            current_date = datetime.strptime(self.date_picker.get_date(), "%Y-%m-%d")

            # Process each row for calculations
            def calculate_adjusted_values(row):
                if pd.notna(row['P&L']) and pd.notna(row['TRADE DATE']):
                    start_date = pd.to_datetime(row['TRADE DATE'])
                    value_to_amortize = row['P&L']
                    adjusted_pnl = calculate_amortization(start_date, current_date, value_to_amortize)
                    combined_value = row['PV'] + adjusted_pnl
                    spread = row.get('SPREAD', 0)  # Change SPREAD column name here if different
                    bid = combined_value - (2 / 3) * spread
                    offer = combined_value + (1 / 3) * spread
                    return pd.Series([adjusted_pnl, combined_value, bid, offer])
                return pd.Series([None, None, None, None])

            # Apply calculations to all rows
            main_data[['Adjusted_P&L', 'Combined_Value', 'Bid', 'Offer']] = main_data.apply(
                calculate_adjusted_values, axis=1
            )

            # Display the processed data
            self.display_data(main_data)

        except Exception as e:
            messagebox.showerror("Error", f"An error occurred: {e}")

    def display_data(self, dataframe):
        """
        Displays the processed data in the Treeview widget.
        """
        self.tree.delete(*self.tree.get_children())
        self.tree["columns"] = list(dataframe.columns)

        # Set up column headings
        for col in dataframe.columns:
            self.tree.heading(col, text=col)
            self.tree.column(col, width=100)

        # Insert rows
        for _, row in dataframe.iterrows():
            self.tree.insert("", "end", values=list(row))

    def __del__(self):
        """
        Cleans up the folder monitoring when the app closes.
        """
        if hasattr(self, 'observer') and self.observer:
            self.observer.stop()
            self.observer.join()


# Run the app
if __name__ == "__main__":
    root = tk.Tk()
    app = StatementGeneratorApp(root)
    root.mainloop()
