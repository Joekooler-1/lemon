import tkinter as tk
from tkinter import filedialog, messagebox
from tkcalendar import Calendar
import pandas as pd
from datetime import datetime
import os
import tempfile
from openpyxl.styles import numbers


def calculate_amortization(start_date, current_date, value):
    """
    Calculate the remaining amortized value.
    """
    fraction_year_passed = (current_date - start_date).days / 365
    months_passed = fraction_year_passed * 12
    return max(0, value * (12 - months_passed) / 12)


class StatementGeneratorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Statement Generator")

        # File paths
        self.main_file_path = None
        self.moved_file_path = None

        # UI Layout
        self.create_widgets()

    def create_widgets(self):
        """
        Create and arrange the UI components.
        """
        # Main File Selector
        tk.Label(self.root, text="Main File:").grid(row=0, column=0, padx=10, pady=5)
        self.main_file_label = tk.Label(self.root, text="No file selected")
        self.main_file_label.grid(row=0, column=1, padx=10, pady=5)
        tk.Button(self.root, text="Browse", command=self.select_main_file).grid(row=0, column=2, padx=10, pady=5)

        # Moved File Selector
        tk.Label(self.root, text="Moved File (CSV):").grid(row=1, column=0, padx=10, pady=5)
        self.moved_file_label = tk.Label(self.root, text="No file selected")
        self.moved_file_label.grid(row=1, column=1, padx=10, pady=5)
        tk.Button(self.root, text="Browse", command=self.select_moved_file).grid(row=1, column=2, padx=10, pady=5)

        # Date Selector
        tk.Label(self.root, text="Date:").grid(row=2, column=0, padx=10, pady=5)
        self.date_picker = Calendar(self.root, selectmode="day", date_pattern="yyyy-mm-dd")
        self.date_picker.grid(row=2, column=1, columnspan=2, padx=10, pady=5)

        # Process Button
        tk.Button(self.root, text="Process Files", command=self.process_files).grid(row=3, column=1, padx=10, pady=10)

    def select_main_file(self):
        """
        Open file dialog to select the main file.
        """
        self.main_file_path = filedialog.askopenfilename(filetypes=[("Excel files", "*.xlsx")])
        self.main_file_label.config(text=self.main_file_path if self.main_file_path else "No file selected")

    def select_moved_file(self):
        """
        Open file dialog to select the moved file.
        """
        self.moved_file_path = filedialog.askopenfilename(filetypes=[("CSV files", "*.csv")])
        self.moved_file_label.config(text=self.moved_file_path if self.moved_file_path else "No file selected")

    def process_files(self):
        """
        Process the main and moved files to calculate values and display results in Excel.
        """
        if not self.main_file_path or not self.moved_file_path:
            messagebox.showerror("Error", "Please select both main and moved files.")
            return

        try:
            # Load files
            main_data = pd.read_excel(self.main_file_path)
            moved_data = pd.read_csv(self.moved_file_path)

            # Validate data
            if 'TRADEIDENTIFIER' not in main_data.columns or 'TRADEIDENTIFIER' not in moved_data.columns:
                messagebox.showerror("Error", "TRADEIDENTIFIER column is missing in one of the files.")
                return

            # Preprocess data
            processed_data = self.preprocess_data(main_data, moved_data)

            # Display in Excel
            self.display_in_excel(processed_data)

        except Exception as e:
            messagebox.showerror("Error", f"An error occurred: {e}")

    def preprocess_data(self, main_data, moved_data):
        """
        Preprocess and merge main and moved data. Perform calculations.
        """
        # Format TRADEIDENTIFIER and merge
        moved_data['TRADEIDENTIFIER'] = moved_data['TRADEIDENTIFIER'].str[:7]
        main_data['TRADEIDENTIFIER'] = main_data['TRADEIDENTIFIER'].astype(str)
        moved_data['TRADEIDENTIFIER'] = moved_data['TRADEIDENTIFIER'].astype(str)
        main_data = main_data.merge(moved_data[['TRADEIDENTIFIER', 'PV']], on='TRADEIDENTIFIER', how='left')

        # Flip the sign of PV
        main_data['PV'] = main_data['PV'] * -1

        # Perform calculations
        current_date = datetime.strptime(self.date_picker.get_date(), "%Y-%m-%d")

        def calculate_row(row):
            if pd.notna(row.get('P&L')) and pd.notna(row.get('TRADE DATE')):
                start_date = pd.to_datetime(row['TRADE DATE'])
                adjusted_pnl = calculate_amortization(start_date, current_date, row['P&L'])
                combined_value = row['PV'] + adjusted_pnl
                bid = combined_value - (2 / 3) * row.get('SPREAD', 0)
                offer = combined_value + (1 / 3) * row.get('SPREAD', 0)
                return pd.Series([adjusted_pnl, combined_value, bid, offer])
            return pd.Series([None, None, None, None])

        main_data[['Adjusted_P&L', 'Combined_Value', 'Bid', 'Offer']] = main_data.apply(calculate_row, axis=1)
        return main_data

    def display_in_excel(self, dataframe):
        """
        Display the processed DataFrame in Excel with specific formatting.
        """
        with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp:
            temp_filename = tmp.name

        with pd.ExcelWriter(temp_filename, engine='openpyxl') as writer:
            dataframe.to_excel(writer, index=False, sheet_name="Processed Data")
            workbook = writer.book
            worksheet = writer.sheets["Processed Data"]

            # Apply formatting
            self.format_columns(worksheet, dataframe)

        os.startfile(temp_filename)

    def format_columns(self, worksheet, dataframe):
        """
        Apply formatting to specific columns in the Excel worksheet.
        """
        for col_idx, col_name in enumerate(dataframe.columns, 1):
            if col_name in ["TRADE DATE", "Effective Date", "Maturity Date"]:
                for cell in worksheet.iter_cols(min_col=col_idx, max_col=col_idx, min_row=2):
                    cell[0].number_format = "mm/dd/yyyy"
            elif col_name in ["Notional", "Notional 2"]:
                for cell in worksheet.iter_cols(min_col=col_idx, max_col=col_idx, min_row=2):
                    cell[0].number_format = "$#,##0.00"
            elif col_name == "Pay Rate":
                for cell in worksheet.iter_cols(min_col=col_idx, max_col=col_idx, min_row=2):
                    cell[0].number_format = "0.00%"
            elif col_name in ["Bid", "Offer"]:
                for cell in worksheet.iter_cols(min_col=col_idx, max_col=col_idx, min_row=2):
                    cell[0].number_format = "0.000%"

# Run the app
if __name__ == "__main__":
    root = tk.Tk()
    app = StatementGeneratorApp(root)
    root.mainloop()
